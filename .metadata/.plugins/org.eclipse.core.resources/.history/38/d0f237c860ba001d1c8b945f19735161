package com.task.security;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.task.entity.Users;
import com.task.repository.UserRepository;

@Service
public class CustomUserDeatilsService implements UserDetailsService {

	@Autowired
	private UserRepository userRepository;

	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		Users user = userRepository.findByEmail(email).orElseThrow(
				() -> new UserNotFound(String.format("User with email : %s is not found", email)));
		Set<String> roles = new HashSet<String>();
		roles.add("ROLE_ADMIN");
		return new User(user.getEmail(),user.getPassword(),userAuthorities(roles));
		
	  }
	  private Collection<? extends GrantedAuthority> userAuthorities(Set<String> roles) {
		 return roles.stream().map(
				 role -> new SimpleGrantedAuthority(role)
				 ).collect(Collectors.toList());
	  }
	}
	
	/*public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Users user = userRepository.findByEmail(email)
		return null;
	}

	/*@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		// TODO Auto-generated method stub
		Users user = userRepository.findByEmail(email).orElseThrow(
				() -> new UserNotFound(String.format("User with email : %s is not found", email)));
		return null;

		/*Set<String> roles = new HashSet<String>(); 
		roles.add("ROLE_ADMIN");
		return new User(User.getE,  null);
	}*/

	/*private Collection<? extends GrantedAuthority> userAuthorities(Set<String> roles) {
		return roles.stream().map(role -> new SimpleGrantedAuthority(role)).collect(Collectors.toList());
	}*/


