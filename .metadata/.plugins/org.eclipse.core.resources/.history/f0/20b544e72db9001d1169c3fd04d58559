package com.task.serviceImpl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.task.entity.Task;
import com.task.entity.Users;
import com.task.exception.APIExceeption;
import com.task.exception.TaskNotFound;
import com.task.exception.UserNotFound;
import com.task.payload.TaskDto;
import com.task.repository.TaskRepository;
import com.task.repository.UserRepository;
import com.task.service.TaskService;

@Service
public class TaskServiceImpl implements TaskService {

	@Autowired
	private ModelMapper modelMapper;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private TaskRepository taskRepository;

	@Override
	public TaskDto saveTask(long userid, TaskDto taskDto) {
		// TODO Auto-generated method stub
		Users user = userRepository.findById(userid)
				.get(); /*
						 * orElseThrow( // get(); /* message.. user not found () -> new
						 * UserNotFound(String.format("User Id %d not found", userid)));
						 */
		Task task = modelMapper.map(taskDto, Task.class);
		task.setUsers(user);
		// After setting the entty user, we are storing data in DB
		Task savedTask = taskRepository.save(task);
		return modelMapper.map(savedTask, TaskDto.class);
	}

	@Override
	public List<TaskDto> getAllTasks(long usersid) {
		// TODO Auto-generated method stub
		userRepository.findById(usersid).get();/*
												 * orElseThrow( // /* message.. task not found () -> new
												 * UserNotFound(String.format("User Id %d not found", usersid)));
												 */
		List<Task> tasks = taskRepository.findAllByUsersId(usersid);
		return tasks.stream().map(task -> modelMapper.map(task, TaskDto.class)).collect(Collectors.toList());
	}

	@Override
	public TaskDto getTask(long userid, long taskid) {
		// TODO Auto-generated method stub
		Users users = userRepository.findById(userid).orElseThrow( // get(); message.. user not found
				() -> new UserNotFound(String.format("User Id %d not found", userid)));
		Task task = taskRepository.findById(taskid).orElseThrow(
				() -> new TaskNotFound(String.format("Task Id %d not found", taskid)));
		if (users.getId() != task.getUsers().getId()) {
			throw new APIExceeption(String.format("Task Id %d is not belong to User Id %d", taskid, userid));

		}
		return modelMapper.map(task, TaskDto.class);
	}

}
